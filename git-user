#!/bin/bash
#
# FILE: git-user
#
# ABSTRACT: Sets user.name and user.email local for the current repository.
#
# AUTHOR: Ralf Schandl
#

script_dir="$(cd "$(dirname "$0")" && pwd)"
script_name="$(basename "$0")"
#script_file="$script_dir/$script_name"

# shellcheck source=git.shlib
. "$script_dir/git.shlib"

repoUserFile="$HOME/.git_repo_users"

execute()
{
    if [ -z "$noop" ]; then
        "$@"
    else
        echo -n >&2 "Execute: "
        printf >&2 "%q " "$@"
        echo >&2
    fi
}


trim()
{
    local var=$1
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace
    echo -n "$var"
}

show_help()
{
    echo >&2 "Sets user.name and user.email local for the current repository."
    echo >&2 ""
    echo >&2 "Usage: $script_name [-l]"
    echo >&2 "   List user.name & user.email."
    echo >&2 ""
    echo >&2 "Usage: $script_name -s <repo-id>"
    echo >&2 "   Set user & email as specified in ${repoUserFile/$HOME/\~}"
    echo >&2 ""
    echo >&2 "Usage: $script_name -s <user> <email>"
    echo >&2 "   Set user & email as given"
    echo >&2 ""
    echo >&2 "Usage: $script_name -s"
    echo >&2 "   Determine repo-id from git remote and set user & email as specified in ${repoUserFile/$HOME/\~}"
    echo >&2 ""
    echo >&2 ""
    echo >&2 "Format of ${repoUserFile/$HOME/\~}:"
    echo >&2 "   :repo:<remote-url-part>:<repo-id>"
    echo >&2 "   <repo-id>:<user>:<email>"
    echo >&2 ""
    echo >&2 "E.g. (note first match is taken):"
    echo >&2 "   :repo:github.com\:joedoe:private"
    echo >&2 "   :repo:github.com:github"
    echo >&2 "   :repo:acme.com:acme"
    echo >&2 "   github:Joe Doe:joe.doe@users.noreply.github.com"
    echo >&2 "   acme:Joe Doe:joe.doe@acme.com"
    echo >&2 "   private:Joe Doe:joe.doe@email.com"
    echo >&2 ""
    if [ -e "$repoUserFile" ]; then
        echo >&2 "Current content of ${repoUserFile/$HOME/\~}:"
        sed 's/^/    /' "$repoUserFile"
        echo >&2 ""
    fi
}

set_identity_by_id()
{
    line="$(grep -v "^#" "$repoUserFile" | grep "^${1}:")"
    if [ -z "$line" ]; then
        echo "Possible repo-ids:"
        grep '^[A-Za-z]*:' "$repoUserFile" | cut -d: -f1
        exit 1
    fi
    # shellcheck disable=SC2162 # no -r cause we want backslash escapes
    IFS=':' read -a line_parts <<< "$line"
    set_identity "${line_parts[1]}" "${line_parts[2]}"
}

set_identity()
{
    echo "Set user.name=$1"
    execute git config --local user.name "$1"
    echo "Set user.email=$2"
    execute git config --local user.email "$2"
}

show_version()
{
    echo "$script_name V1.0"
}

assertGitDir

mode="list"
force=""
noop=""
eval "$(parseargs -gn "git user" -o "l:list#mode=list,s:set#mode=set,f:force#force,n:dry-run#noop" -- "$@")" || exit 7

git_user="$(git config --local user.name)"
git_email="$(git config --local user.email)"

if [ "$mode" = "list" ]; then
    echo "User:   $git_user"
    echo "Email:  $git_email"
    exit 0
elif [ "$mode" = "set" ]; then
    if [ -n "$git_user" ] && [ -n "$git_email" ]; then
        if [ -z "$force" ]; then
            echo "User:   $git_user"
            echo "Email:  $git_email"
            echo >&2 "User and email already set. User '-f' to overwrite."
            exit 1
        fi
    fi
    if [ "$#" == 1 ]; then
        set_identity_by_id "$1"
        exit 0
    elif [ "$#" == 2 ]; then
        set_identity "$1" "$2"
        exit 0
    elif [ "$#" == 0 ]; then
        git_url="$(git remote get-url --push origin)"

        while read -r line; do
            IFS=':' read -r -a line_parts <<< "$line"
            if [[ "$git_url" = *"${line_parts[0]}"* ]]; then
                echo "Detected: ${line_parts[1]}"
                set_identity_by_id "${line_parts[1]}"
                exit 0
            fi
        done < <(grep "^:repo:" "$HOME/.git_repo_users" | sed 's/^:repo://')

        echo >&2 "ERROR: Couldn't detect which user and email to use"

        exit 1
    else
        echo >&2 "ERROR: Net username and email to set identity."
        exit 1
    fi
fi


