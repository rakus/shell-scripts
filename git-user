#!/bin/bash
#
# FILE: git-user
#
# ABSTRACT: Sets user.name and user.email local for the current repository.
#
# AUTHOR: Ralf Schandl
#

script_dir="$(cd "$(dirname "$0")" && pwd)"
script_name="$(basename "$0")"

# shellcheck source=git.shlib
. "$script_dir/git.shlib"

repoUserFile="$HOME/.git_repo_users"

execute()
{
    if [ -z "$noop" ]; then
        "$@"
    else
        echo -n >&2 "Execute: "
        printf >&2 "%q " "$@"
        echo >&2
    fi
}


trim()
{
    local var=$1
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace
    echo -n "$var"
}

show_help()
{
    echo >&2 "Sets user.name and user.email local for the current repository."
    echo >&2 ""
    echo >&2 "Usage: $script_name [-n] <repo-id>"
    echo >&2 "   determine user & email from ${repoUserFile/$HOME/\~} using given id"
    echo >&2 ""
    echo >&2 "Usage: $script_name [-n] -r <repo-id> <user> <email>"
    echo >&2 "   Store user & email in ${repoUserFile/$HOME/\~} with given id"
    echo >&2 ""
    echo >&2 "Options"
    echo >&2 "   -n    Noop - just print what would be done"
    echo >&2 "   -f    set user & email even if already set"
    echo >&2 "         or override already registered repo-id"
    echo >&2 ""
    echo >&2 "Format of ${repoUserFile/$HOME/\~}:"
    echo >&2 "   <repo-id>:<user>:<email>"
    echo >&2 ""
    if [ -e "$repoUserFile" ]; then
        echo >&2 "Current content of ${repoUserFile/$HOME/\~}:"
        sed 's/^/    /' "$repoUserFile"
        echo >&2 ""
    fi
}

show_version()
{
    echo "$script_name V1.0"
}

assertGitDir

repoid=""
noop=""
force=""
eval "$(parseargs -gn "git user" -o "n:noop#noop,r:register=repoid,f:force#force" -- "$@")" || exit 7

if [ -n "$repoid" ] && [ "$#" -ne "2" ]; then
    echo >&2 "ERROR: Need user name and email for registering"
    exit 1
fi

if [ "$#" == 1 ]; then
    line="$(grep -v "^#" "$repoUserFile" | grep "^${1}:")"
    if [ -z "$line" ]; then
        echo "Possible repo-ids:"
        grep '^[A-Za-z]*:' "$repoUserFile" | cut -d: -f1
        exit 1
    fi
    # shellcheck disable=SC2162 # no -r cause we want backslash escapes
    IFS=':' read -a line_parts <<< "$line"
    user="${line_parts[1]}"
    email="${line_parts[2]}"
elif [ "$#" == 2 ]; then
    user="$1"
    email="$2"
elif [ "$#" == 0 ]; then
    echo "User:  $(git config --local user.name)"
    echo "Email: $(git config --local user.email)"
    exit 0
fi

user="$(trim "$user")"
email="$(trim "$email")"

#echo "User:  >>$user<<"
#echo "Email: >>$email<<"

if [ -z "$user" ]; then
    echo >&2 "ERROR: User is empty: \"$user\""
    exit 1
fi
if [ -z "$email" ] || [[ "$email" != *@* ]]; then
    echo >&2 "ERROR: Invalid email: \"$email\""
    exit 1
fi

if [ -n "$repoid" ]; then
    if [[ $repoid = *:* ]]; then
        echo >&2 "ERROR: repo-id must not contain a ':': $repoid"
        exit 1
    fi

    if grep -q "^${repoid}:" "$repoUserFile"; then
        if [ "$force" = "true" ]; then
            if [ -z "$noop" ]; then
                tmp_file="$(mktemp)"
                grep -v "^${repoid}:" "$repoUserFile" > "$tmp_file"
                mv -f "$tmp_file" "$repoUserFile"
            fi
        else
            echo >&2 "ERROR: Repo-id \"$repoid\" already registered. Use -f to overwrite"
            exit 1
        fi
    fi

    execute echo "${repoid}:${user//:/\\:}:${email//:/\\:}"  >> "$repoUserFile"
else
    if [ -n "$(git config --local user.name)" ] || [ -n "$(git config --local user.email)" ]; then
        if [ "$force" != "true" ]; then
            echo >&2 "ERROR: User and/or email already set locally. Use -f to overwrite"
            echo >&2 "    User:  $(git config --local user.name)"
            echo >&2 "    Email: $(git config --local user.email)"
            exit 1
        fi
    fi
    echo "Set user.name=$user"
    execute git config --local user.name "$user"
    echo "Set user.email=$email"
    execute git config --local user.email "$email"
fi

