#!/bin/bash
#
# FILE: ff-pod
#
# ABSTRACT: Configure and run Firefox in a Pod
#
# Script to create, remove or run a containerized Firefox.
# See `ff-pod --help`
#
# AUTHOR: Ralf Schandl
#
# CREATED: 2022-12-17
#

script_name="$(basename "$0")"

typeset -A USER_PREF

USER_PREF["browser.startup.homepage_override.mstone"]='ignore'
USER_PREF["browser.newtabpage.activity-stream.feeds.section.highlights"]='false'
USER_PREF["browser.newtabpage.activity-stream.feeds.snippets"]='false'
USER_PREF["browser.newtabpage.activity-stream.feeds.topsites"]='false'
USER_PREF["browser.newtabpage.activity-stream.showSearch"]='false'
USER_PREF["browser.startup.homepage"]='"about:blank"'
USER_PREF["media.autoplay.default"]='5'
USER_PREF["network.cookie.lifetimePolicy"]='2'
USER_PREF["network.predictor.cleaned-up"]='true'
USER_PREF["permissions.default.camera"]='2'
USER_PREF["permissions.default.desktop-notification"]='2'
USER_PREF["permissions.default.geo"]='2'
USER_PREF["permissions.default.microphone"]='2'

USERNAME="$(id -un)"
UUID=$(id -u)
GROUPNAME="$(id -gn)"
GUID=$(id -g)

FF_IMAGE="firefox.$USERNAME"
BASE_IMAGE="registry.fedoraproject.org/fedora-minimal:37"

# Maximum number of layers before image is recreated from base image
MAX_LAYERS=5

FF_PROFILE="pod"
FF_PROFILE_PATH="$HOME/.mozilla/firefox/ff.$FF_PROFILE"


read -r -d '' WARNING_HTML << EOF
<html>
    <head>
        <title>DON'T USE FOR NORMAL SURFING</title>
    </head>
    <body style="text-align:center">
	<p style="color:red;font-size:5vw">DON'T USE THIS INSTANCE OF FIREFOX FOR NORMAL SURFING!</p>
	<p>It is just for configuring the profile for the containerized Firefox.</p>
	<p>Delete cookies and history before closing.</p>
    </body>
</html>
EOF


show_help()
{
    #         ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8
    echo >&2 "USAGE: $script_name update"
    echo >&2 "    Updates (or creates) the image '$FF_IMAGE' to run firefox in a container."
    echo >&2 "    This will start firefox with the local profile '$FF_PROFILE' so you can"
    echo >&2 "    configure the profile to your liking. Like installing add-ons etc."
    echo >&2 "    Then the container image is created and the just configured profile is"
    echo >&2 "    copied to it."
    echo >&2 "    Rerun this command to update firefox or add-ons."
    echo >&2 ""
    echo >&2 "USAGE: $script_name inspect"
    echo >&2 "    Opens a shell on a container started from the image '$FF_IMAGE'."
    echo >&2 ""
    echo >&2 "USAGE: $script_name remove"
    echo >&2 "    Removes the image '$FF_IMAGE' from the registry."
    echo >&2 "    Note: The locally created firefox profile '$FF_PROFILE' is not removed."
    echo >&2 ""
    echo >&2 "USAGE: $script_name"
    echo >&2 "    Starts firefox in a container using the image created with"
    echo >&2 "    '$script_name update'"
    echo >&2 ""
}

assert_buildah_available()
{
    if ! command -v buildah >/dev/null; then
        echo >&2 "ERROR: Command 'buildah' not available -- can't continue"
        exit 1
    fi
}

assert_podman_available()
{
    if ! command -v podman >/dev/null; then
        echo >&2 "ERROR: Command 'podman' not available -- can't continue"
        exit 1
    fi
}

assert_image_exists()
{
    if podman image exists "$FF_IMAGE"; then
        return
    fi
    echo >&2 "The image '$FF_IMAGE' does not exist - it has to be created first."
    echo >&2 "Use '$script_name update'."
    echo >&2 ""
    show_help
    exit 1
}

create_profile()
{
    local profile="$1"
    local profile_path="$2"
    echo "Creating profile $profile ..."
    /usr/bin/firefox --no-remote --CreateProfile "$profile $profile_path"

    for k in "${!USER_PREF[@]}"; do
        printf 'user_pref(\"%s\", %s);\n' "$k" "${USER_PREF[$k]}" >> "$profile_path/user.js"
    done
}

build_image()
{

    local action
    if podman image exists "$FF_IMAGE"; then
        if [ "$(podman inspect "$FF_IMAGE" --format '{{len .RootFS.Layers}}')" -lt $MAX_LAYERS ]; then
            echo "Image $FF_IMAGE exists, updating it."
            action=update
        else
            echo "Image $FF_IMAGE exists, but already has to many layers - will create new"
            action=new
        fi
    else
        echo "Creating new image '$FF_IMAGE' ..."
        action=new
    fi


    if [ "$action" = "update" ]; then
        cntr="$(buildah from "$FF_IMAGE")"
        buildah run --user "$USERNAME:$GROUPNAME" "$cntr" -- rm -rf "$FF_PROFILE_PATH"

        buildah run --user root "$cntr" -- microdnf -y upgrade \
            --refresh \
            --best \
            --nodocs \
            --noplugins \
            --setopt=install_weak_deps=0

    else
        cntr="$(buildah from "$BASE_IMAGE")"
        buildah run --user root "$cntr" -- microdnf -y upgrade \
            --refresh \
            --best \
            --nodocs \
            --noplugins \
            --setopt=install_weak_deps=0

        # Install firefox and liberation fonts
        buildah run --user root "$cntr" -- microdnf -y install \
            --best \
            --nodocs \
            --noplugins \
            firefox liberation-fonts

        # add a group with same name and id as the primary group as the current user
        buildah run --user root "$cntr" -- /sbin/groupadd -g "$GUID" "$GROUPNAME"
        # add a user with name of the user and same id as on host
        buildah run --user root "$cntr" -- /sbin/useradd -u "$UUID" -g "$GUID" -G audio,video -m "$USERNAME"

    fi

    buildah run --user root "$cntr" -- microdnf clean all

    # copy configured firefox profile 'pod' to container
    buildah run --user "$USERNAME:$GROUPNAME" "$cntr" -- mkdir -p "$FF_PROFILE_PATH"
    buildah copy --chown "$USERNAME:$GROUPNAME" "$cntr" "$FF_PROFILE_PATH" "$FF_PROFILE_PATH"
    # remove lock files to prevent "Firefox is already running but is not responding"
    buildah run "$cntr" -- rm -f "$FF_PROFILE_PATH/lock"  "$FF_PROFILE_PATH/.parentlock"
    buildah run "$cntr" -- rm -rf "$FF_PROFILE_PATH/datareporting"
    # make sure all files in home dir are owned by user
    buildah run "$cntr" -- /bin/sh -c "chown -R $USERNAME:$GROUPNAME /home/$USERNAME"
    # set default user, entry-point and no cmd
    buildah config --user "$USERNAME" --entrypoint '["firefox", "-profile", "'"$FF_PROFILE_PATH"'"]' --cmd '' "$cntr"
    # commit the container as image.
    buildah commit --rm  "$cntr" "$FF_IMAGE"
}

update()
{
    if [ ! -d "$FF_PROFILE_PATH" ]; then
        create_profile "$FF_PROFILE" "$FF_PROFILE_PATH"
    fi

    tmp_file="$(mktemp --tmpdir ff.pod.config.XXXXX.html)"

    echo "$WARNING_HTML" > "$tmp_file"

    firefox -P "$FF_PROFILE" --no-remote "$tmp_file"

    rm -f "$tmp_file"

    build_image
}

inspect_image()
{
    podman run -ti --rm --entrypoint /bin/sh "$FF_IMAGE"
}

run_pod()
{

    typeset -a args
    # map user-id from host to container
    args+=( "--userns=keep-id" )

    # use the hosts network
    args+=( "--network" "host" )

    # related to se-linux and container. TODO: check
    args+=( "--security-opt" "label=type:container_runtime_t" )

    # The DISPLAY environment variable
    args+=( "--env" "DISPLAY" )

    # access to video and sound
    #args+=( "--device" "/dev/video0" )
    #args+=( "--device" "/dev/snd" )
    #args+=( "--volume" "/dev/dri:/dev/dri" )

    #args+=( "--volume" "/tmp/.X11-unix:/tmp/.X11-unix" )
    #args+=( "--volume" "$HOME/.Xauthority:/home/$USERNAME/.Xauthority:Z" )

    #args+=( "--volume" "/etc/machine-id:/etc/machine-id" )
    #args+=( "--volume" "/var/lib/dbus:/var/lib/dbus" )

    #args+=( "--volume" "$HOME/.config/pulse/cookie:/home/$USERNAME/.config/pulse/cookie" )
    #args+=( "--volume" "/run/user/${UUID}/pulse:/run/user/${UUID}/pulse" )
    args+=( "--env" "PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native" )
    args+=( "--volume" "${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native" )

    # The Downloads directory
    args+=( "--volume" "$HOME/Downloads:/home/$USERNAME/Downloads" )

    podman run -i --rm "${args[@]}" "$FF_IMAGE"
}


#---------[ MAIN ]-------------------------------------------------------------

case "${1:-}" in
    "update")
        assert_buildah_available
        assert_podman_available
        update
        ;;
    "inspect")
        assert_podman_available
        assert_image_exists
        inspect_image
        ;;
    "remove")
        assert_podman_available
        podman image rm "$FF_IMAGE"
        ;;
    "")
        assert_podman_available
        assert_image_exists
        run_pod
        ;;
    '--help') show_help ;;
    *)
        echo >&2 "Unknown command: '$1'"
        show_help
        exit 1
        ;;
esac


