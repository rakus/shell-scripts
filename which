#!/bin/sh
#
# FILE: which
#
# ABSTRACT: extended which that can follow symbolic links
#
# Sometimes executables in the path are symbolic links. This version of which
# is able to follow the symlinks and print the final executable using option
# '-l'.
#
# eg:
# $ which netcat
# /bin/netcat
#
# $ which -l netcat
# /bin/netcat -> /etc/alternatives/netcat -> /bin/nc.openbsd
#
# NOTE: This is bases on the original script /bin/which from a
# Ubuntu 10.04 LTS system. I just added the code to follow the links.
#
# AUTHOR: Ralf Schandl
#

set -ef

# How many levels deep do we follow symlinks?
MAX_LINK_LEVEL=16

if test -n "$KSH_VERSION"; then
    putsln() {
        print -r -- "$*"
    }
    puts() {
        print -nr -- "$*"
    }
    error() {
        print -r -- "ERROR: " "$*" >&2
    }
else
    putsln() {
        printf '%s\n' "$*"
    }
    puts() {
        printf '%s' "$*"
    }
    error() {
        printf 'ERROR: %s\n' "$*" >&2
    }
fi

follow_link()
{
    fn="$1"
    cnt=0
    while [ -L "$fn" ]; do
        puts "$fn -> "
        nfn=$(readlink "$fn")

        case "$nfn" in
            /*) : ;;
            *) nfn="$(readlink -f "$(dirname "$fn")/$nfn")" ;;
        esac
        fn="$nfn"

        cnt=$(( cnt + 1 ))
        if [ $cnt -gt $MAX_LINK_LEVEL ]; then
            fn='...'
            break
        fi
    done
    putsln "$fn"
    if [ $cnt -gt $MAX_LINK_LEVEL ]; then
        error "Too many levels of symbolic links"
        return 1
    fi
}


ALLMATCHES=0
LINKCHAIN=0

while getopts al whichopts
do
    case "$whichopts" in
        a) ALLMATCHES=1 ;;
        l) LINKCHAIN=1 ;;
        ?) putsln "Usage: $0 [-al] args"; exit 2 ;;
    esac
done
shift $(( OPTIND - 1))

if [ "$#" -eq 0 ]; then
    ALLRET=1
else
    ALLRET=0
fi
case $PATH in
    (*[!:]:) PATH="$PATH:" ;;
esac
for PROGRAM in "$@"; do
    RET=1
    IFS_SAVE="$IFS"
    IFS=:
    case $PROGRAM in
        */*)
            if [ -f "$PROGRAM" ] && [ -x "$PROGRAM" ]; then
                if [ "$LINKCHAIN" -eq 1 ] && [ -L "$PROGRAM" ]; then
                    follow_link "$PROGRAM"
                    RET=$?
                else
                    putsln "$PROGRAM"
                    RET=0
                fi
            fi
            ;;
        *)
            for ELEMENT in $PATH; do
                if [ -z "$ELEMENT" ]; then
                    ELEMENT=.
                fi
                if [ -f "$ELEMENT/$PROGRAM" ] && [ -x "$ELEMENT/$PROGRAM" ]; then
                    if [ "$LINKCHAIN" -eq 1 ] && [ -L "$ELEMENT/$PROGRAM" ]; then
                        follow_link "$ELEMENT/$PROGRAM"
                        RET=$?
                    else
                        putsln "$ELEMENT/$PROGRAM"
                        RET=0
                    fi
                    [ "$ALLMATCHES" -eq 1 ] || break
                fi
            done
            ;;
    esac
    IFS="$IFS_SAVE"
    if [ "$RET" -ne 0 ]; then
        ALLRET=1
    fi
done

exit "$ALLRET"

